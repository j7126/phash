cmake_minimum_required (VERSION 3.13)

include(ExternalProject)

project(pHash)

set(CMAKE_PROJECT_VERSION 0.9.7)

set(CMAKE_BUILD_TYPE Release CACHE STRING "build type" FORCE)
set(USE_IMAGE_HASH ON CACHE BOOLEAN "compile image hashes" FORCE)
set(USE_AUDIO_HASH OFF CACHE BOOLEAN "compile audio hashes" FORCE)
set(USE_VIDEO_HASH OFF CACHE BOOLEAN "compile video hash" FORCE)
set(USE_TEXT_HASH OFF CACHE BOOLEAN "compile text hash" FORCE)
set(USE_MPG123 OFF CACHE BOOLEAN "use mpg123 library" FORCE)

if (USE_IMAGE_HASH OR USE_VIDEO_HASH OR USE_TEXT_HASH)
  configure_file(src/pHash.h.cmake src/pHash.h)
endif()

if (USE_AUIO_HASH)
  configure_file(src/audiophash.h.cmake src/audiophash.h)
endif()

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src)

if (USE_IMAGE_HASH)
  find_library(libpng png)
  if (libpng-NOTFOUND)
	message(SEND_ERROR "no libpng found")
  endif()
  find_library(libjpeg jpeg)
  if (libjpeg-NOTFOUND)
	message(SEND_ERROR "no libjpeg found")
  endif()
  find_library(libtiff tiff)
  if (libtiff-NOTFOUND)
	message(SEND_ERROR "no libtiff found")
  endif()
  find_library(librt rt)
  if (librt-NOTFOUND)
	message(FATAL_ERROR "no rt library found")
  endif()

  list(APPEND LIB_SRCS src/pHash.cpp src/bmbhash.cpp)
  list(APPEND LIB_DEPS png jpeg tiff pthread rt)
endif()

if (USE_AUDIO_HASH)
  find_library(libsnd sndfile)
  if (libsnd-NOTFOUND)
	message(FATAL_ERROR "no libsndfile found")
  endif()
  find_library(libsamplerate samplerate)
  if (libsamplerate-NOTFOUND)
	message(FATAL_ERROR "no libsamplerate found")
  endif()
  find_library(libmpg123 mpg123)
  if (libmpg123-NOTFOUND)
	message(FATAL_ERROR "no libmpg123 found")
  endif()
  find_library(libvorbis vorbis)
  if (libvorbis-NOTFOUND)
	message(FATAL_ERROR "no libvorbis found")
  endif()
  find_library(libogg ogg)
  if (libogg-NOTFOUND)
	message(FATAL_ERROR "no libogg found")
  endif()
  
  list(APPEND LIB_SRCS "src/audiophash.cpp" "src/ph_fft.c")
  list(APPEND LIB_DEPS ${libsnd} ${libsamplerate} ${libmpg123} ${libvorbis} ${libogg})
endif()

if (USE_VIDEO_HASH)
  find_library(libavformat avformat)
  if (libavformat-NOTFOUND)
	message(FATAL_ERROR "no libavformat found")
  endif()
  find_library(libavcodec avcodec)
  if (libavcodec-NOTFOUND)
	message(FATAL_ERROR "no libavcodec found")
  endif()
  find_library(libswscale swscale)
  if (libswscale-NOTFOUND)
	message(FATAL_ERROR "no libswscale found")
  endif()
  list(APPEND LIB_SRCS "src/cimgffmpeg.cpp")
  list(APPEND LIB_DEPS ${libavformat} ${libavcodec} ${libswscale})
endif()

add_library(pHash SHARED ${LIB_SRCS})
set_property(TARGET pHash PROPERTY VERSION ${CMAKE_PROJECT_VERSION})
add_library(pHash-static STATIC ${LIB_SRCS})
set_property(TARGET pHash-static PROPERTY SOVERSION ${CMAKE_PROJECT_VERSION_MAJOR})

target_link_libraries(pHash ${LIB_DEPS})
target_link_libraries(pHash	${LIBS_DEPS})


install(TARGETS pHash DESTINATION lib)
install(TARGETS pHash-static DESTINATION lib)
if (USE_IMAGE_HASH OR USE_VIDEO_HASH OR USE_TEXT_HASH)
  install(FILES src/pHash.h DESTINATION include)
endif()
if (USE_AUDIO_HASH)
  install(FILES src/audiophash.h DESTINATION include)
endif()

if(HAVE_IMAGE_HASH)
add_executable(TestDCT "examples/test_imagephash.cpp")
target_link_libraries (TestDCT pHash)


add_executable(TestBMB "examples/test_bmbimagehash.cpp")
target_link_libraries (TestBMB pHash)


add_executable(TestMH "examples/test_mhimagehash.cpp")
target_link_libraries (TestMH pHash)
endif()


if(HAVE_AUDIO_HASH)
add_executable(TestAudio "examples/test_audiophash.cpp")
target_link_libraries (TestAudio pHash)
endif()

if(HAVE_VIDEO_HASH)
add_executable(TestVideoHash "examples/test_dctvideohash.cpp")
target_link_libraries (TestVideoHash pHash)
endif()

# tests
enable_testing()
add_executable(Testfft tests/fft-test.c)
target_include_directories(Testfft PRIVATE src)
target_link_libraries(Testfft pHash)
add_test(NAME test_fft COMMAND Testfft)

add_executable(Testdct tests/dct-imagehash-test.cpp)
target_include_directories(Testdct PRIVATE src)
target_link_libraries(Testdct pHash)
add_test(Test_dct Testdct resources/img1.jpg resources/img2.jpg)


include (InstallRequiredSystemLibraries)
set(CPACK_GENERATOR "TGZ")
set(CPACK_SOURCE_GENERATOR "TGZ")
set (CPACK_PACKAGE_VERSION_MAJOR "${pHash_VERSION_MAJOR}")
set (CPACK_PACKAGE_VERSION_MINOR "${pHash_VERSION_MINOR}")
include (CPack)
